# -*- coding: utf-8 -*-
"""Day_8_RAG_Fundamentals_Doc_Loaders.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19pPGlqBg77fN9RIKFpwyKSP04ABP2C6I
"""

# Document Loaders

# Example 1 - Text Doc loader

!pip install -U langchain langchain-community pypdf beautifulsoup4



from langchain_community.document_loaders import TextLoader

loader = TextLoader("/content/sample.txt")  # Make sure the file is uploaded
docs = loader.load()

print(docs[0].page_content)  # Show first document's content

# Example 2 - Text loader , data & metadata retriever

from langchain_community.document_loaders import TextLoader

loader = TextLoader("/content/sample.txt")  # Upload your .txt file to /content
docs = loader.load()

print("📄 Page Content:\n", docs[0].page_content)
print("🗂️ Metadata:\n", docs[0].metadata)

# csv loader

from langchain_community.document_loaders import CSVLoader

loader = CSVLoader(file_path="/content/data.csv")  # Upload your .csv
docs = loader.load()

print("📄 First Row Content:\n", docs[0].page_content)
print("🗂️ Metadata:\n", docs[0].metadata)

# pdf loader

from langchain_community.document_loaders import PyPDFLoader

loader = PyPDFLoader("/content/example.pdf")  # Upload your .pdf
pages = loader.load()

print("📄 Page 1 Content:\n", pages[0].page_content[:500])
print("🗂️ Metadata:\n", pages[0].metadata)

# web page loader

from langchain_community.document_loaders import WebBaseLoader

loader = WebBaseLoader("https://docs.databricks.com/aws/en/machine-learning/")
docs = loader.load()

print("📄 Web Page Content:\n", docs[0].page_content[:500])
print("🗂️ Metadata:\n", docs[0].metadata)

# now lets implement the doc loaders using LLM to extract from knowledge base

# Example 1 - Text Loader

!pip install -U langchain langchain-openai langchain-community pypdf beautifulsoup4 striprtf

from google.colab import userdata
import os

os.environ["OPENAI_API_KEY"] = userdata.get("OPENAI_API_KEY")

# load doc

from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_community.document_loaders import TextLoader

# Load file
loader = TextLoader("/content/sample.txt")
docs = loader.load()
document_text = docs[0].page_content

# Setup GPT model
llm = ChatOpenAI(model="gpt-4o", temperature=0.2)

# Setup prompt template
prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful assistant that summarizes documents."),
    ("human", "Summarize the following content:\n\n{input_text}")
])

# generate summary

chain = prompt | llm

response = chain.invoke({"input_text": document_text})

print("📄 Summary:\n", response.content)

# Example 2 - PDF Loader

# load doc

from langchain_openai import ChatOpenAI
from langchain_core.prompts import ChatPromptTemplate
from langchain_community.document_loaders import PyPDFLoader

# Load file
loader = PyPDFLoader("/content/example.pdf")
docs = loader.load()
document_text = docs[10].page_content

# Setup GPT model
llm = ChatOpenAI(model="gpt-4o", temperature=0.2)

# Setup prompt template
prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful assistant that summarizes documents."),
    ("human", "Summarize the following content:\n\n{input_text}")
])

# generate summary

chain = prompt | llm

response = chain.invoke({"input_text": document_text})

print("📄 Summary:\n", response.content)

# Example 3 - CSV Loader

# load doc & generate summary

from langchain_community.document_loaders import CSVLoader

loader = CSVLoader(file_path="/content/data.csv")  # Upload file
docs = loader.load()
csv_text = "\n".join([doc.page_content for doc in docs])

llm = ChatOpenAI(model="gpt-4o", temperature=0.3)

prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful assistant that summarizes CSV data."),
    ("human", "Summarize the key insights from the following CSV data:\n\n{input_text}")
])

chain = prompt | llm
response = chain.invoke({"input_text": csv_text})
print("📊 CSV Summary:\n", response.content)

# Example 4 - WebSite Loader

# Load Web-doc and generate summary

from langchain_community.document_loaders import WebBaseLoader

url = "https://docs.databricks.com/aws/en/machine-learning/"
loader = WebBaseLoader(url)
docs = loader.load()
web_text = docs[0].page_content

llm = ChatOpenAI(model="gpt-4o", temperature=0.3)

prompt = ChatPromptTemplate.from_messages([
    ("system", "You are a helpful assistant that summarizes web content."),
    ("human", "Summarize the following webpage content:\n\n{input_text}")
])

chain = prompt | llm
response = chain.invoke({"input_text": web_text})
print("🌐 Web Summary:\n", response.content)

# End of the examples.

